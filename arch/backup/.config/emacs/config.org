#+TITLE: Emacs config.org
#+STARTUP: fold
#+STARTUP: latexpreview

* Key bindings
C-c e         open emacs config file (~/.conig/emacs/config.org)
C-c r         refresh emacs config file (~/.conig/emacs/config.org)
C-return      Open terminal
M-s           Avi (plugin/package)
C-x r         Save with sudo? (r = root)
(OFF)C-c s         Show/hide markup (s = show)
** TODO put this in aha.org
* Minor settings
** show lines and column on the modeline
#+begin_src emacs-lisp
  (line-number-mode 1)
  (column-number-mode 1)
#+end_src
** auto brackets (electric) (OFF)
   #+begin_src emacs-lisp
;     (setq electric-pair-pairs '(
;				 (?\( . ?\))
;				 (?\[ . ?\])
;				 ))
;     (electric-pair-mode t)
   #+end_src
#+begin_src emacs-lisp
  ; disable starting screen
  (setq inhibit-startup-message t)

  (scroll-bar-mode -1) ; Disable visible scrollbar
  (tool-bar-mode -1) ; Disable the toolbar
  ;(tooltip-mode -1) ; Disable tooltips
  ;(set-fringe-mode 10) ; TODO Give some breathing room
  (menu-bar-mode -1) ; Disable menu bar

  ;(setq visible-bell t) ; Set up the visible bell

  ; Theme
  (load-theme 'solarized-dark t) ; Requires install

  ; Changes the "yes or no" promtps to "y or n"
  (defalias 'yes-or-no-p 'y-or-n-p)


  ; disable autosave and automatic creation of backup files
  (setq make-backup-files nil)
  (setq auto-save-default nil)

  ; Makes scrolling sane
  (setq scroll-conservatively 100)



  ; Stop cursor blinking
  (blink-cursor-mode 0)

  ; Try typing lambda (not in a comment)
  ;(global-prettify-symbols-mode t)

  ; Highlights current line
  ;(global-hl-line-mode t)

  ; Indentation (TODO: pogledaj sve ovo, uzeto iz witchmacs)
  ;(setq-default tab-width 4)
  ;(setq-default standard-indent 4)
  ;(setq c-basic-offset tab-width)
  ;(setq-default electric-indent-inhibit t)
  ;(setq-default indent-tabs-mode t)
  ;(setq backward-delete-char-untabify-method 'nil)

  ;TODO: idk
  ;(global-prettify-symbols-mode t)

#+end_src

** Save my location within a file

Using =save-place-mode= saves the location of point for every file I visit. If I
close the file or close the editor, then later re-open it, point will be at the
last place I visited.

#+begin_src emacs-lisp
  (save-place-mode t)
#+end_src

** Always indent with spaces

Never use tabs. Tabs are the devil’s whitespace.

#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
#+end_src

** line numbers


Line numbers OFF

#+begin_src emacs-lisp
;  (global-display-line-numbers-mode) ; Display line numbers
#+end_src

** default programs

Set default browser to Brave.
#+begin_src emacs-lisp
  (setq browse-url-browser-function 'browse-url-generic
        browse-url-generic-program "chromium-browser")
#+end_src

** (set-frame-font Times
* Spell sheck

#+begin_src emacs-lisp
  (setq ispell-program-name "hunspell")
  (setq ispell-local-dictionary "sr")
  (setq ispell-local-dictionary-alist
        '(("sr" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil nil nil utf-8)))
  (flyspell-mode 1)
  
  


  (setq ispell-program-name "hunspell")
  (setq ispell-hunspell-dict-paths-alist
  '(("sr" "/home/milos/kita/sr.aff")))

  (setq ispell-local-dictionary "sr")
  (setq ispell-local-dictionary-alist
  '(("sr" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "sr") nil utf-8)))
  (flyspell-mode 1)
#+end_src

* Org mode
** Display preferences

For shortened headers: shows "⤵" instead of "...".

#+begin_src emacs-lisp
  (setq org-ellipsis "⤵")
#+end_src

Hide slashes and stars that show /italic/ and *bold*. (OFF)

#+begin_src emacs-lisp
;  (setq org-hide-emphasis-markers t)
#+end_src

Use syntax highlighting in source blocks while editing.

#+begin_src emacs-lisp
  (setq org-src-fontify-natively t)
#+end_src



Pretty bullets instead of asterisks for headlines.
"Better" alternative to org-bullets is org-superstar ([[https://www.youtube.com/watch?v=gsbw8CQGrM8][watch from 7:00]])
#+begin_src emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+end_src

Use syntax highlighting in source blocks while editing.

#+begin_src emacs-lisp
  (setq org-src-fontify-natively t)
#+end_src

Enables the "<s TAB" code snippet for #+begin_src
#+begin_src emacs-lisp
  (require 'org-tempo)
#+end_src

Sets scratch buffer to org mode:
#+begin_src emacs-lisp
  (setq initial-major-mode 'org-mode)
#+end_src

When editing a code snippet, use the current window rather than popping open a
new one (which shows the same information).

#+begin_src emacs-lisp
  (setq org-src-window-setup 'current-window)
#+end_src

Quickly insert a block of elisp (usefull for this config file):

#+begin_src emacs-lisp
  (add-to-list 'org-structure-template-alist
               '("el" . "src emacs-lisp"))
#+end_src

Don't indent newly expanded blocks, even if they're under a heading.

#+begin_src emacs-lisp
  (setq org-adapt-indentation nil)
#+end_src

Navodno bullets na plain-listama umesto crtica i zvezdica (NE RADI, ZATO JE OFF, TODO)

#+begin_src emacs-lisp
  ;  (font-lock-add-keywords 'org-mode
  ;                            '(("^ *\\([-]\\) "
  ;                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
#+end_src
   

Bolji naslovi, bez boja, veci su (namesti na svoje, do tad je OFF, TODO)

#+begin_src emacs-lisp
  ;(let* ((variable-tuple (cond ((x-list-fonts "Source Sans Pro") '(:font "Source Sans Pro"))
  ;                               ((x-list-fonts "Lucida Grande")   '(:font "Lucida Grande"))
  ;                               ((x-list-fonts "Verdana")         '(:font "Verdana"))
  ;                               ((x-family-fonts "Sans Serif")    '(:family "Sans Serif"))
  ;                               (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro."))))
  ;         (base-font-color     (face-foreground 'default nil 'default))
  ;         (headline           `(:inherit default :weight bold :foreground ,base-font-color)))
  ;
  ;    (custom-theme-set-faces 'user
  ;                            `(org-level-8 ((t (,@headline ,@variable-tuple))))
  ;                            `(org-level-7 ((t (,@headline ,@variable-tuple))))
  ;                            `(org-level-6 ((t (,@headline ,@variable-tuple))))
  ;                            `(org-level-5 ((t (,@headline ,@variable-tuple))))
  ;                            `(org-level-4 ((t (,@headline ,@variable-tuple :height 1.1))))
  ;                            `(org-level-3 ((t (,@headline ,@variable-tuple :height 1.25))))
  ;                            `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.5))))
  ;                            `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.75))))
  ;                            `(org-document-title ((t (,@headline ,@variable-tuple :height 1.5 :underline nil))))))
#+end_src
** Inline $$LaTeX$$ and Images

#+begin_src emacs-lisp
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.5))
#+end_src

Render images in emacs with <width>. If <width> is "nil", then use "#+attr_latex: :width <number>" if specified, and if not, then just use the actual image width.

#+begin_src emacs-lisp
  (setq org-image-actual-width 450)
#+end_src

(NOT WORKING)Enable inline rendering of $$LaTeX$$.

#+begin_src emacs-lisp
  (setq org-startup-latex-with-latex-preview t)
#+end_src


(NOT WORKING)Enable inline rendering of images.

#+begin_src emacs-lisp
  (org-toggle-inline-images)
#+end_src

** Org-Babel

Don't ask before evaluating code blocks.

#+begin_src emacs-lisp
  (setq org-confirm-babel-evaluate nil)
#+end_src

Enable org-babel evaluation in different languages

#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)))

  (org-babel-do-load-languages
   'org-babel-load-languages '((C . t)))
#+end_src


** Other stuff
** Exporting
*** Exporting

Translate regular ol' straight quotes to typographically-correct curly quotes
when exporting.

#+begin_src emacs-lisp
  (setq org-export-with-smart-quotes t)
#+end_src

*** $LaTeX$

Save, compile, open in pdf viewer:

#+begin_src emacs-lisp
  (defun my-compile-org-to-latex-pdf-and-open ()
    (interactive)
    (save-buffer)
    (org-open-file (org-latex-export-to-pdf)))

  (define-key org-mode-map (kbd "<f6>") 'my-compile-org-to-latex-pdf-and-open)

#+end_src

Put page break after table of contents.

#+begin_src emacs-lisp
  (setq org-latex-toc-command "\\tableofcontents \\clearpage")
#+end_src

* Evil mode
   
Download and enable evil.

#+begin_src emacs-lisp
  (use-package evil
    :ensure t
    ;:defer .1 ;; don't block emacs when starting, load evil immediately after startup
    :init
    (setq evil-want-integration t) ;; This is on by default
    (setq evil-want-keybinding nil) ; For evil-complete
    :config
    (evil-mode 1)
    (message "Loading evil-mode...done"))
#+end_src

Install =evil-collection=, which provides evil-friendly bindings for many modes.

#+begin_src emacs-lisp
;  (use-package evil-collection
;    :after evil
;    :ensure t
;    :config
;    :custom (evil-collection-setup-minibuffer t)
;    :custom (evil-collection-calendar-want-org-bindings t)
;    (setq evil-collection-mode-list
;          '(which-key))
;    (evil-collection-init))
#+end_src

Evil-org
- Indent with =M-h/j/k/l=
- Indent with => or <=
- Manipulate tables with =M-h/j/k/l=
- gj, move between headers (or source blocks, or whatever)
- vim text object "ae", (ae=an element)

#+begin_src emacs-lisp
;  (use-package evil-org
;    :ensure t
;    :after org
;    :hook (org-mode . (lambda () evil-org-mode))
;    :config
;    (require 'evil-org-agenda)
;    (evil-org-agenda-set-keys))
#+end_src

Evil stuff.
TODO: visual g$ i g^ kada je visaul line mode ukljucen, ovo moze samo da se uradi tako sto ukljucim sve te visual shitove kad skontam da je file org mode

#+begin_src emacs-lisp

  ; Treat Wrapped line scrolling as single lines
  (define-key evil-normal-state-map (kbd "j") 'evil-next-visual-line)
  (define-key evil-normal-state-map (kbd "k") 'evil-previous-visual-line)

  ; (TODO: not working, also don't know if i need everything(for things like using caps for escape AND ctrl)) esc quits pretty much anything (like pending prompts in the minibuffer)
  ;(define-key evil-normal-state-map [escape] 'keyboard-quit)
  ;(define-key evil-visual-state-map [escape] 'keyboard-quit)
  ;(define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
  ;(define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
  ;(define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
  ;(define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
  ;(define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)

#+end_src
* Convenient functions
** TODO not working
#+begin_src emacs-lisp
;   (defun org-toggle-emphasis ()
;     "Toggle hiding/showing of org emphasize markers."
;     (interactive)
;     (if org-hide-emphasis-markers
;       (set-variable 'org-hide-emphasis-markers nil)
;       (set-variable 'org-hide-emphasis-markers t)
;       (org-mode-restart)))
;   (define-key org-mode-map (kbd "C-c s") 'org-toggle-emphasis)
#+end_src

* yasnippet

Enable yasnippet

#+begin_src emacs-lisp
  ;(use-package yasnippet
  ;  :ensure t)
#+end_src

I keep my snippets in =.config/emacs/snippets=, and I always want =yasnippet= enabled.

#+begin_src emacs-lisp
  ;(setq yas-snippet-dirs '("~/.config/emacs/snippets"))
  ;(yas-global-mode 1)
#+end_src

Disable yasnippet auto indentation.

#+begin_src emacs-lisp
  ;(setq yas-indent-line 'auto)
#+end_src

* srpski keymap
#+begin_src emacs-lisp
;  (define-key evil-normal-state-map "х" 'evil-shift-left)
;  (define-key evil-normal-state-map "ј" 'evil-insert)
;  (define-key evil-normal-state-map "к" 'evil-insert)
;  (define-key evil-normal-state-map "л" 'evil-insert)
;  (define-key evil-normal-state-map "" 'evil-insert)
;  (define-key evil-normal-state-map "" 'evil-insert)
;  (define-key evil-normal-state-map "" 'evil-insert)
;  (define-key evil-normal-state-map "" 'evil-insert)
;  (define-key evil-normal-state-map "и" 'evil-insert)
#+end_src


#+begin_src emacs-lisp
  ;(defun org-export-translate-to-lang (term-translations &optional lang)
  ;  "Adds desired translations to `org-export-dictionary'.
  ;   TERM-TRANSLATIONS is alist consisted of term you want to translate
  ;   and its corresponding translation, first as :default then as :html and
  ;   :utf-8. LANG is language you want to translate to."
  ;  (dolist (term-translation term-translations)
  ;    (let* ((term (car term-translation))
  ;           (translation-default (nth 1 term-translation))
  ;           (translation-html (nth 2 term-translation))
  ;           (translation-utf-8 (nth 3 term-translation))
  ;           (term-list (assoc term org-export-dictionary))
  ;           (term-langs (cdr term-list)))
  ;      (setcdr term-list (append term-langs
  ;                                (list
  ;                                 (list lang
  ;                                       :default translation-default
  ;                                       :html translation-html
  ;                                       :utf-8 translation-utf-8)))))))
  ;
  ;(org-export-translate-to-lang '(("Table of Contents"
  ;                                 "Sadržaj"
  ;                                 "Sadr&#382;aj"
  ;                                 "Sadržaj")
  ;                                ("Another term"
  ;                                 "coilogji"))
  ;                              "sr")
#+end_src
* dashboard
  #+begin_src emacs-lisp
    (use-package dashboard
      :ensure t
      :config
      (dashboard-setup-startup-hook)
      (setq dashboard-items '((recents . 10))) ; optional
      (setq dashboard-banner-logo-title "Stecks"))
  #+end_src
* modeline
** spaceline (TODO: pick better line that
   #+begin_src emacs-lisp
     (use-package spaceline
       :ensure t
       :config
       (require 'spaceline-config)
       (spaceline-spacemacs-theme))
   #+end_src
** diminish
   Hides (most) minor modes from showing in the bottom bar.
   #+begin_src emacs-lisp
     (use-package diminish
       :ensure t
       :init
       (diminish 'company-mode)
       (diminish 'beacon-mode)
       (diminish 'which-key-mode)
       (diminish 'rainbow-mode)
       )
   #+end_src 
* sudo edit
  #+begin_src emacs-lisp
    (use-package sudo-edit
      :ensure t
      :bind ("C-x r" . sudo-edit)) ; r = root TODO, bolji keybind?
  #+end_src
* Terminal
#+begin_src emacs-lisp
  (defvar my-term-shell "/bin/zsh")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)


  ; TODO: global-set-key, vidi zasto ne radi, ova sama komanda i nije toliko bitna
  ;(global-set-key (kbd "<C-return>") 'ansi-term)
  (global-set-key (kbd "<C-return>") 'eval-buffer)

#+end_src

* Which-key
  This plugin/package shows you the /key bindings/chords/ when you start typing some but you don't finish (you have to wait a little bit). e.g. C-x
#+begin_src emacs-lisp
; install which key
(use-package which-key
  :ensure t
  :init
  (which-key-mode))
#+end_src

* config edit/reload

  Edit

   #+begin_src emacs-lisp
     (defun config-visit ()
       (interactive)
       (find-file "~/.config/emacs/config.org"))
     (global-set-key (kbd "C-c e") 'config-visit)
   #+end_src

  Reload

   #+begin_src emacs-lisp
     (defun config-reload ()
       (interactive)
       (org-babel-load-file (expand-file-name "~/.config/emacs/config.org")))
     (global-set-key (kbd "C-c r") 'config-reload)
   #+end_src

* rainbow
** Shows colors in emacs when viewing hexadecimal colors. e.g. #FF6933
#+begin_src emacs-lisp
  (use-package rainbow-mode
      :ensure t
      :init (rainbow-mode 1))
#+end_src

** colors brackets in pairs
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init
    (rainbow-delimiters-mode 1))
#+end_src 

* Ido (TODO replace)
  *TODO: Good alternatives to Ido are /helm/ and /swiper/* (mozda nadji koji je dobar sa evil mode-om, i org mode-om) (najvrv koristi helm jer msm da je mnooogo popularniji od ostalih)
  Ido essentialy makes it nicer to do stuff like open files, change buffers... (shows options, better autocompletion)
** Enable ido mode
#+begin_src emacs-lisp
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
#+end_src
** ido vertical
   #+begin_src emacs-lisp
     (use-package ido-vertical-mode
       :ensure t
       :init
       (ido-vertical-mode 1))
     (setq ido-vertical-define-keys 'C-n-and-C-p-only) ; You can cycle through completions with C-n and C-p
   #+end_src   
** smex
   #+begin_src emacs-lisp
     (use-package smex
       :ensure t
       :init (smex-initialize)
       :bind
       ("M-x" . smex))
   #+end_src
   
** switch buffer
   #+begin_src emacs-lisp
     (global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
   #+end_src
* OFF, or I don't know 
** window splitting functions (OFF, idk what it does)
  Idk what this stuff is, someting related to the last option thing (switch-window). Idk what either of them do entirely.
  #+begin_src emacs-lisp
;    (defun split-and-follow-horizontally ()
;      (interactive)
;      (split-window-below)
;      (balanca-windows)
;      (other-window 1))
;    (global-key-set (kbd "C-x 2") 'split-and-follow-horizontally)
;  
;    (defun split-and-follow-vertically ()
;      (interactive)
;      (split-window-right)
;      (balanca-windows)
;      (other-window 1))
;    (global-key-set (kbd "C-x 3") 'split-and-follow-vertically)
  
  #+end_src
** switch-window (OFF, idk what it does)

  #+begin_src emacs-lisp
;    (use-package switch-window
;      :ensure t
;      :config
;      (setq switch-window-input-style 'minibuffer)
;      (setq switch-window-increase 4)
;      (setq switch-window-threshold 2)
;      (setq switch-window-shortcut-style 'qwery) ; optional, TODO?
;      (setq switch-window-qwerty-shortcuts ; goes with last option
;	    '("a" "s" "d" "f" "j" "k" "l")) ; TODO C-o ne radi jer koristim evil mode
;      :bind ; TODO, ono "a" "s" "d"... i te stvari ne rade, nego mi ispisuje brojeve umesto toga
;      ([remap other-window] . switch-window))
  #+end_src
  
** Beacon (OFF, not using it)
#+begin_src emacs-lisp
  ; Package that shows your cursor position on new buffer
  ;(use-package beacon
  ;  :ensure t
  ;  :init
  ;  (beacon-mode 1))

#+end_src 
** buffers (evil mode incompatable??)
  Uncle dave, meh msm da ne radi sa evil mode-om, a i mogu samo koristiti file exporer.
  #+begin_src emacs-lisp
    (global-set-key (kbd "C-x b") `ibuffer)
  #+end_src

** avi (not using it)
  #+begin_src emacs-lisp
    (use-package avy
      :ensure t
      :bind
      ("M-s" . avy-goto-char))
  #+end_src
** non evil mode stuff (OFF)
*** kill whole word (OFF, i'm using evil mode, so no need for this)
    #+begin_src emacs-lisp
      (defun kill-whole-word ()
        (interactive)
        (backward-ward)
        (kill-word 1))
      (global-set-key (kbd "C-c w w") 'kill-whole-word)
    #+end_src
  Good plugins: hungry-delete
** copy whole line (OFF)
   #+begin_src emacs-lisp
;     (defun copy-whole-line ()
;       (interactive)
;       (save-excursion
;	 (kill-new
;	  (buffer-substring
;	   (point-atbol)
;	   (point-at-eol)))))
;     (global-set-key (kbd "C-c w ]") 'copy-whole-line)
   #+end_src
** autocomplete (OFF)
 Currenlty using /company/, /auto-completion/ is probably better.
 #+begin_src emacs-lisp
  ; (use-package company
  ;   :ensure t
  ;   :init
  ;   (add-hook 'after-init-hook 'global-company-mode))
 #+end_src
