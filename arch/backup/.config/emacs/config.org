* Key bindings
  C-c e         open emacs config file (~/.conig/emacs/config.org)
  C-c r         refresh emacs config file (~/.conig/emacs/config.org)
  C-return      Open terminal
  M-s           Avi (plugin/package)
  C-x r         Save with sudo? (r = root)
* Minor settings
** show lines and column on the modeline
   #+begin_src emacs-lisp
     (line-number-mode 1)
     (column-number-mode 1)
   #+end_src
** auto brackets (electric) (OFF)
   #+begin_src emacs-lisp
;     (setq electric-pair-pairs '(
;				 (?\( . ?\))
;				 (?\[ . ?\])
;				 ))
;     (electric-pair-mode t)
   #+end_src
#+begin_src emacs-lisp
  ; disable starting screen
  (setq inhibit-startup-message t)

  (scroll-bar-mode -1) ; Disable visible scrollbar
  (tool-bar-mode -1) ; Disable the toolbar
  ;(tooltip-mode -1) ; Disable tooltips
  (set-fringe-mode 10) ; TODO Give some breathing room
  (menu-bar-mode -1) ; Disable menu bar

  ;(setq visible-bell t) ; Set up the visible bell

  ; Theme
  (load-theme 'solarized-dark t) ; Requires install

  ; Changes the "yes or no" promtps to "y or n"
  (defalias 'yes-or-no-p 'y-or-n-p)


  ; disable autosave and automatic creation of backup files
  (setq make-backup-files nil)
  (setq auto-save-default nil)

  ; Makes scrolling sane
  (setq scroll-conservatively 100)



  ; Stop cursor blinking
  (blink-cursor-mode 0)

  ; Try typing lambda (not in a comment)
  ;(global-prettify-symbols-mode t)

  ; Highlights current line
  ;(global-hl-line-mode t)

  ; Indentation (TODO: pogledaj sve ovo, uzeto iz witchmacs)
  ;(setq-default tab-width 4)
  ;(setq-default standard-indent 4)
  ;(setq c-basic-offset tab-width)
  ;(setq-default electric-indent-inhibit t)
  ;(setq-default indent-tabs-mode t)
  ;(setq backward-delete-char-untabify-method 'nil)

  ;TODO: idk
  ;(global-prettify-symbols-mode t)

#+end_src

* Org mode
** basic config
   #+begin_src emacs-lisp
     (setq org-src-window-setup 'current-window) ; When you "C-c '", opens in current window instead of openning another one
   #+end_src
   
** org-bullets
#+begin_src emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+end_src
** other stuff
#+begin_src emacs-lisp
  ; Enables the "<s TAB" code snippet for #+begin_src
  (require 'org-tempo)

  ;; ORG MODE
  ;; auto-indent an org-mode file
  ;(add-hook 'org-mode-hook
  ;(lambda()
  ;(Local-set-key (kbd "C-c C-c") 'org-table-align)
  ;(local-set-key (kbd "C-c C-f") 'org-table-calc-current-TBLFM)
  ;(org-indent-mode t)))
#+end_src
* Evil mode
#+begin_src emacs-lisp

(use-package evil
  :ensure t
  ;:defer .1 ;; don't block emacs when starting, load evil immediately after startup
  :init
  :config
  (evil-mode)
  (message "Loading evil-mode...done"))

; Treat Wrapped line scrolling as single lines
(define-key evil-normal-state-map (kbd "j") 'evil-next-visual-line)
(define-key evil-normal-state-map (kbd "k") 'evil-previous-visual-line)
; (TODO: not working, also don't know if i need everything(for things like using caps for escape AND ctrl)) esc quits pretty much anything (like pending prompts in the minibuffer)
;(define-key evil-normal-state-map [escape] 'keyboard-quit)
;(define-key evil-visual-state-map [escape] 'keyboard-quit)
;(define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
;(define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
;(define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
;(define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
;(define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)

#+end_src
* autocomplete
 Currenlty using /company/, /auto-completion/ is probably better.
 #+begin_src emacs-lisp
   (use-package company
     :ensure t
     :init
     (add-hook 'after-init-hook 'global-company-mode))
 #+end_src
* dashboard
  #+begin_src emacs-lisp
    (use-package dashboard
      :ensure t
      :config
      (dashboard-setup-startup-hook)
      (setq dashboard-items '((recents . 10))) ; optional
      (setq dashboard-banner-logo-title "Stecks"))
  #+end_src
* modeline
** spaceline (TODO: pick better bottom bar than this one)
   #+begin_src emacs-lisp
     (use-package spaceline
       :ensure t
       :config
       (require 'spaceline-config)
       (spaceline-spacemacs-theme))
   #+end_src
** diminish
   Hides (most) minor modes from showing in the bottom bar.
   #+begin_src emacs-lisp
     (use-package diminish
       :ensure t
       :init
       (diminish 'company-mode)
       (diminish 'beacon-mode)
       (diminish 'which-key-mode)
       (diminish 'rainbow-mode)
       )
   #+end_src 
* Convenient functions
** non evil mode stuff (OFF)
*** kill whole word (OFF, i'm using evil mode, so no need for this)
    #+begin_src emacs-lisp
      (defun kill-whole-word ()
        (interactive)
        (backward-ward)
        (kill-word 1))
      (global-set-key (kbd "C-c w w") 'kill-whole-word)
    #+end_src
  Good plugins: hungry-delete
** copy whole line (OFF)
   #+begin_src emacs-lisp
;     (defun copy-whole-line ()
;       (interactive)
;       (save-excursion
;	 (kill-new
;	  (buffer-substring
;	   (point-atbol)
;	   (point-at-eol)))))
;     (global-set-key (kbd "C-c w ]") 'copy-whole-line)
   #+end_src
* sudo edit
  #+begin_src emacs-lisp
    (use-package sudo-edit
      :ensure t
      :bind ("C-x r" . sudo-edit)) ; r = root TODO, bolji keybind?
  #+end_src
* Terminal
#+begin_src emacs-lisp
  (defvar my-term-shell "/bin/zsh")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)


  ; TODO: global-set-key, vidi zasto ne radi, ova sama komanda i nije toliko bitna
  ;(global-set-key (kbd "<C-return>") 'ansi-term)
  (global-set-key (kbd "<C-return>") 'eval-buffer)

#+end_src

* Which-key
  This plugin/package shows you the /key bindings/chords/ when you start typing some but you don't finish (you have to wait a little bit). e.g. C-x
#+begin_src emacs-lisp
; install which key
(use-package which-key
  :ensure t
  :init
  (which-key-mode))
#+end_src

* Ido
  *TODO: Good alternatives to Ido are /helm/ and /swiper/* (mozda nadji koji je dobar sa evil mode-om, i org mode-om) (najvrv koristi helm jer msm da je mnooogo popularniji od ostalih)
  Ido essentialy makes it nicer to do stuff like open files, change buffers... (shows options, better autocompletion)
** Enable ido mode
#+begin_src emacs-lisp
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
#+end_src
** ido vertical
   #+begin_src emacs-lisp
     (use-package ido-vertical-mode
       :ensure t
       :init
       (ido-vertical-mode 1))
     (setq ido-vertical-define-keys 'C-n-and-C-p-only) ; You can cycle through completions with C-n and C-p
   #+end_src   
** smex
   #+begin_src emacs-lisp
     (use-package smex
       :ensure t
       :init (smex-initialize)
       :bind
       ("M-x" . smex))
   #+end_src
   
** switch buffer
   #+begin_src emacs-lisp
     (global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
   #+end_src
* avi (not using it)
  #+begin_src emacs-lisp
    (use-package avy
      :ensure t
      :bind
      ("M-s" . avy-goto-char))
  #+end_src
* config edit/reload
** edit
   #+begin_src emacs-lisp
     (defun config-visit ()
       (interactive)
       (find-file "~/.config/emacs/config.org"))
     (global-set-key (kbd "C-c e") 'config-visit)
   #+end_src
** reload
   #+begin_src emacs-lisp
     (defun config-reload ()
       (interactive)
       (org-babel-load-file (expand-file-name "~/.config/emacs/config.org")))
     (global-set-key (kbd "C-c r") 'config-reload)
   #+end_src

* rainbow
** Shows colors in emacs when viewing hexadecimal colors. e.g. #FF6933
  #+begin_src emacs-lisp
    (use-package rainbow-mode
    :ensure t
    :init (rainbow-mode 1))
  #+end_src
** colors brackets in pairs
  #+begin_src emacs-lisp
    (use-package rainbow-delimiters
      :ensure t
      :init
      (rainbow-delimiters-mode 1))
  #+end_src 
* buffers (evil mode incompatable??)
  Uncle dave, meh msm da ne radi sa evil mode-om, a i mogu samo koristiti file exporer.
  #+begin_src emacs-lisp
    (global-set-key (kbd "C-x b") `ibuffer)
  #+end_src
* Beacon (OFF, not using it)
#+begin_src emacs-lisp
  ; Package that shows your cursor position on new buffer
  ;(use-package beacon
  ;  :ensure t
  ;  :init
  ;  (beacon-mode 1))

#+end_src 
* switch-window (OFF, idk what it does)
  #+begin_src emacs-lisp
;    (use-package switch-window
;      :ensure t
;      :config
;      (setq switch-window-input-style 'minibuffer)
;      (setq switch-window-increase 4)
;      (setq switch-window-threshold 2)
;      (setq switch-window-shortcut-style 'qwery) ; optional, TODO?
;      (setq switch-window-qwerty-shortcuts ; goes with last option
;	    '("a" "s" "d" "f" "j" "k" "l")) ; TODO C-o ne radi jer koristim evil mode
;      :bind ; TODO, ono "a" "s" "d"... i te stvari ne rade, nego mi ispisuje brojeve umesto toga
;      ([remap other-window] . switch-window))
  #+end_src
  
* window splitting functions (OFF, idk what it does)
  Idk what this stuff is, someting related to the last option thing (switch-window). Idk what either of them do entirely.
  #+begin_src emacs-lisp
;    (defun split-and-follow-horizontally ()
;      (interactive)
;      (split-window-below)
;      (balanca-windows)
;      (other-window 1))
;    (global-key-set (kbd "C-x 2") 'split-and-follow-horizontally)
;  
;    (defun split-and-follow-vertically ()
;      (interactive)
;      (split-window-right)
;      (balanca-windows)
;      (other-window 1))
;    (global-key-set (kbd "C-x 3") 'split-and-follow-vertically)
  
  #+end_src

* clock (OFF)
  #+begin_src emacs-lisp
    (setq display-time-24hr-format t)
    (display-time-mode 1)
  #+end_src
  
